import asyncio
from aiogram import Bot, Dispatcher, types, Router
from aiogram.filters.command import Command
from aiogram.utils.keyboard import ReplyKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, KeyboardButton, ReplyKeyboardRemove
import json

bot = Bot(token='–í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –¢–û–ö–ï–ù')

router = Router()
admin = '–í–°–¢–ê–í–¨–¢–ï –°–Æ–î–ê –í–ê–® –ê–ô–î–ò (—Ü–∏—Ñ—Ä–∞–º–∏)'

class anketa(StatesGroup):
    known_as = State()
    know_mean = State()
    time = State()

@router.message(lambda message: message.text == "üîÅ–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æüîÅ")
@router.message(lambda message: message.text == "üö©–ù–∞—á–∞—Ç—å!üö©")
async def start_anket(message: Message, state: FSMContext):
    await state.set_state(anketa.known_as)
    await state.update_data(id=message.from_user.username)
    await message.answer('–û—Ç–∫—É–¥–∞ –≤—ã –ø—Ä–æ –Ω–∞—Å —É–∑–Ω–∞–ª–∏?', reply_markup=ReplyKeyboardRemove())

@router.message(anketa.known_as)
async def know_anket(message: Message, state: FSMContext):
    await state.update_data(known_as=message.text)
    await message.answer('–ó–Ω–∞–∫–æ–º—ã —Å —Ç–∞–∫–∏–º–∏ –ø–æ–Ω—è—Ç–∏—è–º–∏ –∫–∞–∫ –ê–Ω—Ç–∏–¥–µ—Ç–µ–∫—Ç-–ë—Ä–∞—É–∑–µ—Ä—ã –∏ –ø—Ä–æ–∫—Å–∏? \n–ï—Å–ª–∏ –¥–∞, —Ç–æ –≤ –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ä–∞–±–æ—Ç–∞–ª —Å –Ω–∏–º–∏?')
    await state.set_state(anketa.know_mean)

@router.message(anketa.know_mean)
async def know_mean(message: Message, state:FSMContext):
    await state.update_data(knowledge=message.text)
    await message.answer('–°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç–µ?')
    await state.set_state(anketa.time)

@router.message(anketa.time)
async def time_(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    user_data = await state.get_data()
    await message.answer(
    f'''
    –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞: 
    –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {user_data['known_as']}
    –ó–Ω–∞–∫–æ–º—ã –ª–∏ —Å –ø–æ–Ω—è—Ç–∏—è–º–∏: {user_data['knowledge']}
    –°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏: {user_data['time']}
    ''', reply_markup=ReplyKeyboardMarkup(
        keyboard = [
            [
                KeyboardButton(text='‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å!‚úÖ', resize_keyboard=True),
                KeyboardButton(text='üîÅ–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æüîÅ', resize_keyboard=True)
            ]
        ]
    ))
    await state.clear()

    @router.message(lambda message: message.text == "‚úÖ–û—Ç–ø—Ä–∞–≤–∏—Ç—å!‚úÖ")
    async def send(message: Message):
        await message.answer('–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!')
        await bot.send_message(admin, f'–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞!')
        await bot.send_message(admin, f'''
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['id']}
    –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏: {user_data['known_as']}
    –ó–Ω–∞–∫–æ–º—ã –ª–∏ —Å –ø–æ–Ω—è—Ç–∏—è–º–∏: {user_data['knowledge']}
    –°–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–∏: {user_data['time']}
    ''')
